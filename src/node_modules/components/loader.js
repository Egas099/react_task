import React, { useState, useContext } from 'react'
import { Context } from 'context'

function loader() {
    const { importUsers, setFileName } = useContext(Context);

    const [isOver, setIsOver] = useState(false);
    const [loading, setLoading] = useState(false);

    function onDrop(e) {
        e.preventDefault();
        e.stopPropagation();
        setFileName(e.dataTransfer.files[0].name);
        let reader = new FileReader();
        reader.onloadend = () => {
            var rawFile = new XMLHttpRequest();
            rawFile.overrideMimeType("application/json");
            rawFile.open("GET", reader.result, true);
            rawFile.onreadystatechange = () => {
                if (rawFile.readyState === 4 && rawFile.status == "200") {
                    const fileData = JSON.parse(rawFile.responseText);
                    setLoading(false);
                    importUsers(getUsers(fileData, []).sort());
                }
            };
            rawFile.send(null);
        };
        reader.readAsDataURL(e.dataTransfer.files[0]);

        setLoading(true);
        setIsOver(false);
    }
    function getUsers(reply, users) {
        if (!users.find(user => user === reply.user)) {
            users.push(reply.user);
        }
        if (reply.replies) {
            for (let i = 0; i < reply.replies.length; i++) {
                users = getUsers(reply.replies[i], users);
            }
        }
        return users;
    }
    function onDragOver(e) {
        e.preventDefault();
    }

    return (
        <div>
            <div className={(loading ? "loading" : "dropping") + " dropZone " + (isOver ? "over" : "")}
                onDrop={onDrop}
                onDragOver={onDragOver}
                onDragEnter={() => { setIsOver(true) }}
                onDragLeave={() => { setIsOver(false) }}
            >
            </div>
        </div>
    )
}

export default loader
